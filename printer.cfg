[include shell_command.cfg]
# This file contains common pin mappings for the BIGTREETECH SKR V1.4
# board. To use this config, the firmware should be compiled for the
# LPC1768 or LPC1769(Turbo).

# See docs/Config_Reference.md for a description of parameters.

[include mainsail.cfg]

[stepper_x]
step_pin: P2.2
dir_pin: P2.6
enable_pin: !P2.1
microsteps: 16
rotation_distance: 40
endstop_pin: P1.29
position_endstop: 298
position_max: 298
homing_speed: 50
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: P1.10
run_current: 1.000
hold_current: 0.350
stealthchop_threshold: 500

[stepper_y]
step_pin: P0.19
dir_pin: P0.20
enable_pin: !P2.8
microsteps: 16
rotation_distance: 40
endstop_pin: P1.28
position_endstop: 285
position_max: 285
homing_speed: 50
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: P1.9
run_current: 1.000
hold_current: 0.350
stealthchop_threshold: 500

[stepper_z]
step_pin: P0.22
dir_pin: P2.11
enable_pin: !P0.21
microsteps: 16
rotation_distance: 8
#endstop_pin: P0.10
endstop_pin: probe:z_virtual_endstop
#position_endstop: -1.9
position_max: 300
position_min: -2.0

[tmc2209 stepper_z]
uart_pin: P1.8
run_current: 0.800
hold_current: 0.500
stealthchop_threshold: 500

[extruder]
step_pin: P2.13
dir_pin: P0.11
enable_pin: !P2.12
microsteps: 16
rotation_distance: 8.16
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: P2.7
sensor_type: ATC Semitec 104GT-2
sensor_pin: P0.24
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
min_temp: 0
max_temp: 260
pressure_advance: 0.20175

[tmc2209 extruder]
uart_pin: P1.4
run_current: 0.750
hold_current: 0.500
stealthchop_threshold: 5000

#[extruder1]
#step_pin: P1.15
#dir_pin: P1.14
#enable_pin: !P1.16
#heater_pin: P2.4
#sensor_pin: P0.23
#...

[heater_bed]
heater_pin: P2.5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: P0.25
#control: pid
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 130

[fan]
pin: P2.3

[mcu]
serial: /dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.1:1.0
restart_method: command

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 1800
#max_accel: 10000 #resonance testing
#max_accel_to_decel: 10000 #resonance testing
max_z_velocity: 5
max_z_accel: 30

[bed_mesh]
probe_count: 5, 5
mesh_min: 15, 0
mesh_max: 283, 270

[safe_z_home]
home_xy_position: 149, 142

[probe]
x_offset: 0.0
y_offset: -12.0
z_offset: 2.73
pin: P0.10
samples: 2

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,
    EXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,
    EXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "ssp0"

[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
contrast: 47
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
## Some micro-controller boards may require an spi bus to be specified:
#spi_bus: spi
## Alternatively, some micro-controller boards may work with software spi:
#spi_software_miso_pin: EXP2_1
#spi_software_mosi_pin: EXP2_6
#spi_software_sclk_pin: EXP2_2

[output_pin beeper]
pin: EXP1_1

#[input_shaper]
#shaper_freq_x: 31.2
#shaper_freq_y: 23.8
#shaper_type: mzv

#[mcu rpi]
#serial: /tmp/klipper_host_mcu

#[mpu9250]
#i2c_mcu: rpi
#i2c_bus: i2c.1

### RPi Pico resonance tester ###

#[mcu pico]
#serial: /dev/serial/by-id/usb-Klipper_rp2040_E6613852836B9B25-if00

#[mpu9250]
#i2c_mcu: pico
#i2c_bus: i2c0a

#[resonance_tester]
#accel_chip: mpu9250
#probe_points:
#    100, 100, 20  # an example

#[static_digital_output pico3V3pwm] # Improve power stability
#pins: pico:gpio23

##################################

#[mcu adxl]
#serial: /dev/serial/by-id/usb-Klipper_rp2040_E66260879744C12A-if00

##ADXL345
#[adxl345]
#cs_pin: adxl:gpio9
#spi_software_sclk_pin: adxl:gpio10
#spi_software_mosi_pin: adxl:gpio11
#spi_software_miso_pin: adxl:gpio12

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    149, 142, 25

##################################

[output_pin power]
pin: !P1.27
shutdown_value: 0
value: 0
pwm: false

[gcode_macro BED_MESH_DEFAULT]
gcode:
  BED_MESH_PROFILE LOAD="default"

[gcode_macro POWER_ON]
gcode:
  SET_PIN PIN=power VALUE=1
  G4 P150
  SET_LED LED=Hypercube_light RED=0.0 GREEN=0.0 BLUE=0.0 SYNC=1
  SET_LED LED=Hypercube_light RED=1.0 GREEN=1.0 BLUE=0.8 SYNC=1
  BED_MESH_DEFAULT

[gcode_macro POWER_OFF]
gcode:
  SET_LED LED=Hypercube_light RED=0.0 GREEN=0.0 BLUE=0.0 SYNC=1
  G4 P150
  SET_PIN PIN=power VALUE=0

[gcode_macro SET_POWER]
# The variable below should be initialized to the startup value.  If your
# device is configured to be on at startup use "variable_value: 1"
variable_value: 0
gcode:
  {% if 'VALUE' not in params %}
    {action_raise_error("Parameter 'VALUE' missing from 'SET_POWER'")}
  {% endif %}
  {% set state = params.VALUE|int %}
  {% if state %}
    # turn the PSU on
    POWER_ON
  {% else %}
    # turn the PSU off
    POWER_OFF
  {% endif %}
  # Update the state of our variable.  This will inform Moonraker that
  # the device has changed its state.
  SET_GCODE_VARIABLE MACRO=SET_POWER VARIABLE=value value={state}

[gcode_macro LIGHTS_ON]
gcode:
  SET_LED LED=Hypercube_light RED=1.0 GREEN=1.0 BLUE=0.8 SYNC=1

[gcode_macro LIGHTS_OFF]
gcode:
  SET_LED LED=Hypercube_light RED=0.0 GREEN=0.0 BLUE=0.0 SYNC=1

[menu __main __octoprint]
type: disabled

[menu __main __Machine_controls]
type: list
name: Machine Controls

[menu __main __Machine_controls __PSU_control]
type: list
name: PSU Control
#enable:
#   See above for a description of these parameters.

[menu __main __Machine_controls __PSU_control __ON]
type: command
name: Power on
enable: true
#   See above for a description of these parameters.
gcode: POWER_ON
#   Script to run on button click or long click. Evaluated as a
#   template.

[menu __main __Machine_controls __PSU_control __OFF]
type: command
name: Power off
enable: true
#   See above for a description of these parameters.
gcode: POWER_OFF
#   Script to run on button click or long click. Evaluated as a
#   template.

[menu __main __Machine_controls __Light_control]
type: list
name: Light Control
#enable:
#   See above for a description of these parameters.

[menu __main __Machine_controls __Light_control __ON]
type: command
name: Lights on
enable: true
#   See above for a description of these parameters.
gcode: LIGHTS_ON
#   Script to run on button click or long click. Evaluated as a
#   template.

[menu __main __Machine_controls __Light_control __OFF]
type: command
name: Lights off
enable: true
#   See above for a description of these parameters.
gcode: LIGHTS_OFF
#   Script to run on button click or long click. Evaluated as a
#   template.

[neopixel Hypercube_light]
pin: P1.24
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count: 44
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 0.8
#initial_WHITE: 0.0
#   See the "led" section for information on these parameters.

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[virtual_sdcard]
path: ~/printer_data/gcodes

[display_status]

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####

  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}



  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}



  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg

  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 25.755
#*# pid_ki = 1.455
#*# pid_kd = 113.966
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 73.880
#*# pid_ki = 1.785
#*# pid_kd = 764.659
#*#
#*# [input_shaper]
#*# shaper_type_x = ei
#*# shaper_freq_x = 38.8
#*# shaper_type_y = 3hump_ei
#*# shaper_freq_y = 53.0
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.357500, 0.110000, -0.001250, -0.142500, 0.002500
#*# 	  0.427500, 0.307500, 0.250000, 0.246250, 0.247500
#*# 	  0.480000, 0.342500, 0.275000, 0.273750, 0.336250
#*# 	  0.665000, 0.518750, 0.458750, 0.460000, 0.511250
#*# 	  1.147500, 0.880000, 0.747500, 0.757500, 0.918750
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 15.0
#*# max_x = 283.0
#*# min_y = 0.0
#*# max_y = 270.0
