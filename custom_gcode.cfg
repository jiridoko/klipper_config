[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating (but don't wait for it)
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Move the nozzle very close to the bed
    G1 Z0.30 F300

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 50mm
    G1 Z50 F3000
    G90
    # Disable steppers
    M84
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30

[delayed_gcode POWER_OFF_PRINTER_CHECK]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 50.0 %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            POWER_OFF
        {% else %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro QUERY_BME280]
gcode:
    {% set sensor = printer["bme280 enclosure_temp"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}```

[gcode_button PSU_SENSING]
pin: host:gpiochip0/gpio22
press_gcode:
  SET_PSU_STATE PSU_STATE=1
release_gcode:
  SET_PSU_STATE PSU_STATE=0

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: SET_HEATER_TEMPERATURE_ORIGINAL
gcode:
  {% if not PSU_STATE %}
    POWER_ON
  {% endif %}
  SET_HEATER_TEMPERATURE_ORIGINAL { rawparams }

[gcode_macro M104]
rename_existing: M104.1
gcode:
  {% if not PSU_STATE %}
    POWER_ON
  {% endif %}
  M104.1 { rawparams }
  
[gcode_macro M109]
rename_existing: M109.1
gcode:
  {% if not PSU_STATE %}
    POWER_ON
  {% endif %}
  M109.1 { rawparams }
  
[gcode_macro M140]
rename_existing: M140.1
gcode:
  {% if not PSU_STATE %}
    POWER_ON
  {% endif %}
  M140.1 { rawparams }
  
[gcode_macro M190]
rename_existing: M190.1
gcode:
  {% if not PSU_STATE %}
    POWER_ON
  {% endif %}
  M190.1 { rawparams }
  
[gcode_macro M106]
rename_existing: M106.1
gcode:
  {% if not PSU_STATE %}
    POWER_ON
  {% endif %}
  M106.1 { rawparams }

[gcode_macro M600] 
gcode: 
  PAUSE

[gcode_macro M601] 
gcode: 
  PAUSE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIGINAL
gcode:
  {% if not PSU_STATE %}
    POWER_ON
  {% endif %}
  BED_MESH_CALIBRATE_ORIGINAL { rawparams }

[gcode_macro SET_PSU_STATE]
variable_psu_state: 0
gcode:
    {% set PSU_STATE = params.PSU_STATE | default(0) | int %}
    {% if PSU_STATE == 0 %}
      #{action_respond_info("PSU_STATE=0")}
    {% else %}
      #{action_respond_info("PSU_STATE=1")}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=SET_PSU_STATE VARIABLE=psu_state VALUE={ PSU_STATE }

[gcode_macro BED_MESH_DEFAULT]
gcode:
  BED_MESH_PROFILE LOAD="default"

[gcode_macro POWER_ON]
gcode:
  SET_PIN PIN=power VALUE=1
  G4 P150
  SET_LED LED=Hypercube_light RED=0.0 GREEN=0.0 BLUE=0.0 SYNC=1
  SET_LED LED=Hypercube_light RED=1.0 GREEN=1.0 BLUE=0.8 SYNC=1
  SET_GCODE_VARIABLE MACRO=SET_POWER VARIABLE=value value=1
  BED_MESH_DEFAULT

[gcode_macro POWER_OFF]
gcode:
  {% if state == "Printing" %}
  {action_respond_info("Job is active. No shutdown!")}
  {% else %}
  {action_respond_info("Performing safe shutdown")}
  SET_LED LED=Hypercube_light RED=0.0 GREEN=0.0 BLUE=0.0 SYNC=1
  SET_GCODE_VARIABLE MACRO=SET_POWER VARIABLE=value value=0
  G4 P150
  SET_PIN PIN=power VALUE=0
  {% endif %}

[gcode_macro SET_POWER]
# The variable below should be initialized to the startup value.  If your
# device is configured to be on at startup use "variable_value: 1"
variable_value: 0
gcode:
  {% if 'VALUE' not in params %}
    {action_raise_error("Parameter 'VALUE' missing from 'SET_POWER'")}
  {% endif %}
  {% set state = params.VALUE|int %}
  {% if state %}
    # turn the PSU on
    POWER_ON
  {% else %}
    # turn the PSU off
    POWER_OFF
  {% endif %}
  # Update the state of our variable.  This will inform Moonraker that
  # the device has changed its state.
  #SET_GCODE_VARIABLE MACRO=SET_POWER VARIABLE=value value={state}

[gcode_macro LIGHTS_ON]
gcode:
  SET_LED LED=Hypercube_light RED=1.0 GREEN=1.0 BLUE=0.8 SYNC=1

[gcode_macro LIGHTS_OFF]
gcode:
  SET_LED LED=Hypercube_light RED=0.0 GREEN=0.0 BLUE=0.0 SYNC=1

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####

  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}



  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg

  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
